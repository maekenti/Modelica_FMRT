package Flaschenzug_Bibliothek
  connector Winkel_Moment_Connector
    import SI = Modelica.SIunits;
    SI.Angle phi "Winkel";
    flow SI.Torque M "Moment";
    annotation(
      Icon(graphics = {Ellipse(origin = {-1, 4}, fillColor = {37, 150, 225}, fillPattern = FillPattern.Solid, extent = {{101, 96}, {-99, -104}}, endAngle = 360), Text(origin = {42, -17}, extent = {{-154, 69}, {70, -27}}, textString = "W&M")}, coordinateSystem(initialScale = 0.1)),
      Documentation(info = "<html><head></head><body>Dieser Konnektor hat die Flussgröße Moment und die Potenzialgröße Winkel.</body></html>"));
  end Winkel_Moment_Connector;

  connector Spannung_Strom_Connector
    import SI = Modelica.SIunits;
      SI.Power U"Spannung";
    SI.Current I "Strom";
    annotation(
      Icon(coordinateSystem(initialScale = 0.1), graphics = {Rectangle(fillColor = {121, 193, 66}, fillPattern = FillPattern.Solid, extent = {{-100, 100}, {100, -100}}), Text(origin = {-3, 11}, extent = {{-189, 63}, {189, -63}}, textString = "U&I")}),
      Documentation(info = "<html><head></head><body>Dieser Konnektor hat die Flussgröße Strom und die Potenzialgröße Spannung.</body></html>"));
  end Spannung_Strom_Connector;

  connector Kraft_Weg_Connector
  import SI = Modelica.SIunits;
    flow SI.Force F "Kraft";
    
    SI.Length s"Weg";
   
    annotation(
      Icon(coordinateSystem(initialScale = 0.1), graphics = {Polygon(fillColor = {200, 159, 34}, fillPattern = FillPattern.Solid, points = {{0, 100}, {0, 100}, {-100, 0}, {-80, -100}, {80, -100}, {100, 0}, {0, 100}}), Text(origin = {48, -23}, extent = {{-208, 59}, {110, -45}}, textString = "F&s")}),
      Documentation(info = "<html><head></head><body>Dieser Konnektor hat die Flussgröße Kraft und die Potenzialgröße Weg.</body></html>"));
  end Kraft_Weg_Connector;

  model Masse "Für die Masse nur positive Werte eingeben.
    Bei großer Änderung des Wertes, muss eventuell die Rollenanzahl angepasst werden."
    import SI = Modelica.SIunits;
    Flaschenzug_Bibliothek.Kraft_Weg_Connector F_s_Connector annotation(
      Placement(visible = true, transformation(origin = {2, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-1, 61}, extent = {{-21, -21}, {21, 21}}, rotation = 0)));
    constant Real g = Modelica.Constants.g_n "Erdbeschleunigung";
    parameter SI.Mass m = 10 "Masse";
    SI.Force Fg "Gewichtskraft";
    SI.Velocity v(start = 0)"Geschwindigkeit";
    SI.Acceleration a(start = 0)"Beschleunigung";
    SI.Length s "Weg";
    SI.Force F "Kraft";
  equation
    F_s_Connector.s = s;
    F_s_Connector.F = F;
    Fg =( m * g + m * a);
    F_s_Connector.F = -Fg;
    der(F_s_Connector.s) = v;
    der(v) = a;
    annotation(
      Diagram,
      Icon(coordinateSystem(initialScale = 0.1), graphics = {Polygon(origin = {0, -55}, fillPattern = FillPattern.Solid, points = {{-100, -45}, {-58, 45}, {58, 45}, {100, -45}, {98, -45}, {-100, -45}}), Ellipse(origin = {7, 3}, fillPattern = FillPattern.Solid, extent = {{-39, 37}, {23, -33}}, endAngle = 360), Ellipse(origin = {5, 5}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-25, 23}, {11, -29}}, endAngle = 360), Rectangle(origin = {4, -23}, fillPattern = FillPattern.Solid, extent = {{-42, 13}, {42, -13}})}),
      Documentation(info = "<html><head></head><body><p>Fg ist die Gewichtskraft und abhängig von der Masse.</p><p>Kräfte in Richtung Erde sind positiv definiert.</p><p>Und auf Grund vom Kräftegleichgewicht ist die Kraft, die am Konnektor wirkt, negativ definiert.</p><p><br></p><div><br></div></body></html>"));
  end Masse;

model Fixpunkt

equation

  annotation(
    Icon(graphics = {Rectangle(origin = {0, 50}, fillPattern = FillPattern.Solid, extent = {{-100, 4}, {100, -10}}), Polygon(origin = {-85, 77}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {-45, 77}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {-5, 77}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {35, 77}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {75, 77}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Rectangle(origin = {0, 25}, fillPattern = FillPattern.Solid, extent = {{-10, 15}, {10, -15}}), Ellipse(origin = {1, -21}, fillPattern = FillPattern.Solid, extent = {{-41, 41}, {39, -39}}, endAngle = 360), Ellipse(origin = {-15, -5}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-9, 9}, {39, -39}}, endAngle = 360), Rectangle(origin = {33, 2}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-23, 22}, {19, -18}}), Ellipse(origin = {31, -15}, fillPattern = FillPattern.Solid, extent = {{-7, 7}, {9, -9}}, endAngle = 360)}, coordinateSystem(initialScale = 0.1)));
end Fixpunkt;

  model Seilrolle "Der Radius der Seilrolle ist nur mit positiven Werten zu parametrisieren."
    Flaschenzug_Bibliothek.Kraft_Weg_Connector F_s_Flaschenzug annotation(
      Placement(visible = true, transformation(origin = {2, 42}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {70, 88}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    Flaschenzug_Bibliothek.Winkel_Moment_Connector Winkel_Moment_Connector1 annotation(
      Placement(visible = true, transformation(origin = {66, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-90, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    import SI = Modelica.SIunits;
    parameter SI.Length r = 0.5"Rollenradius";
    SI.AngularVelocity om"Winkelgeschwindigkeit";
    SI.Velocity v "Geschwindigkeit";
    SI.Length s "Weg";
    SI.Force F "Kraft";
    SI.Torque M "Moment";
    SI.Angle phi "Winkel";
    
  initial equation
    Winkel_Moment_Connector1.phi = 0"Winkel";
    equation
    F_s_Flaschenzug.s = s;
    F_s_Flaschenzug.F = F;
    Winkel_Moment_Connector1.phi = phi;
    Winkel_Moment_Connector1.M = M;
    Winkel_Moment_Connector1.M = F_s_Flaschenzug.F * r;
    v = om * r;
    der(Winkel_Moment_Connector1.phi) = om;
    der(F_s_Flaschenzug.s) = v;
    annotation(
      Icon(graphics = {Rectangle(extent = {{68, 54}, {68, 54}}), Rectangle(origin = {-67, -1}, fillPattern = FillPattern.Solid, extent = {{-9, 71}, {7, -71}}), Rectangle(origin = {87, 1}, fillPattern = FillPattern.Solid, extent = {{-3, 71}, {13, -71}}), Rectangle(origin = {14, -37}, fillPattern = FillPattern.Solid, extent = {{-74, -7}, {70, 11}}), Rectangle(origin = {14, 37}, fillPattern = FillPattern.Solid, extent = {{-74, -11}, {70, 7}}), Polygon(origin = {-32, 0}, fillPattern = FillPattern.Solid, points = {{-14, 26}, {4, -26}, {14, -26}, {-4, 26}, {-14, 26}}), Polygon(origin = {-14, 0}, fillPattern = FillPattern.Solid, points = {{-14, 26}, {4, -26}, {14, -26}, {-4, 26}, {-14, 26}}), Polygon(origin = {4, 0}, fillPattern = FillPattern.Solid, points = {{-14, 26}, {4, -26}, {14, -26}, {-4, 26}, {-14, 26}}), Polygon(origin = {22, 0}, fillPattern = FillPattern.Solid, points = {{-14, 26}, {4, -26}, {14, -26}, {-4, 26}, {-14, 26}}), Polygon(origin = {40, 0}, fillPattern = FillPattern.Solid, points = {{-14, 26}, {4, -26}, {14, -26}, {-4, 26}, {-14, 26}}), Polygon(origin = {58, 0}, fillPattern = FillPattern.Solid, points = {{-14, 26}, {4, -26}, {14, -26}, {-4, 26}, {-14, 26}}), Rectangle(origin = {70, 52}, fillPattern = FillPattern.Solid, extent = {{-4, -26}, {6, 34}}), Rectangle(origin = {-89, 0}, fillPattern = FillPattern.Solid, extent = {{13, -16}, {-11, 16}})}, coordinateSystem(initialScale = 0.1)),
      Documentation(info = "<html><head></head><body>Die Seilrolle hat den vordefinierten Radius von 0.5m, kann bei Bedarf aber geändert werden.<div><br></div><div>Mit der nebenstehenden Berechnung kann mit dem Winkel die Strecke berechnet werden, bzw. andersrum.</div><div>Durch Ableitung der Potenzialgrößen wir die Geschwindigkeit berechnet.</div><div>Mit Hilfe des Radius der Seilrolle kann dann die Umrechnung von Geschwindigkeit und Winkelgeschwindigkeit stattfinden.</div></body></html>"));
  end Seilrolle;

  model Spannungsquelle"Nur positive Spannungwerte eintragen"
    Flaschenzug_Bibliothek.Spannung_Strom_Connector spannung_Strom_Connector1 annotation(
      Placement(visible = true, transformation(origin = {70, 4}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {84, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    import SI = Modelica.SIunits;
    parameter SI.Voltage U = 48"Spannung";
    parameter Boolean Richtung = true"Zugrichtung";
    SI.ElectricCurrent I"Strom";
  equation
    spannung_Strom_Connector1.U = if Richtung then U else -U;
   
    spannung_Strom_Connector1.I = I;
    annotation(
      Icon(coordinateSystem(initialScale = 0.1), graphics = {Polygon(origin = {-15, 1}, fillPattern = FillPattern.Solid, points = {{-85, 53}, {85, 53}, {85, -53}, {73, -53}, {73, 41}, {-85, 41}, {-85, 53}}), Polygon(origin = {-21, -46}, fillPattern = FillPattern.Solid, points = {{-79, -6}, {79, -6}, {79, 6}, {-79, 6}, {-79, -6}}), Rectangle(origin = {-93, 1}, fillPattern = FillPattern.Solid, extent = {{-7, 41}, {5, -41}}), Rectangle(origin = {-63, 0}, fillPattern = FillPattern.Solid, extent = {{-17, 4}, {19, -4}}), Rectangle(origin = {33, 0}, fillPattern = FillPattern.Solid, extent = {{-19, 4}, {17, -4}}), Rectangle(origin = {32, 0}, fillPattern = FillPattern.Solid, extent = {{-4, 18}, {4, -18}}), Line(origin = {12, 4}, points = {{0, 0}, {0, 0}}), Rectangle(origin = {83, 0}, fillPattern = FillPattern.Solid, extent = {{-13, 14}, {13, -14}})}),
      Documentation(info = "<html><head></head><body>Der Parameter Spannung kann erhöht und erniedrigt werden, sollte aber im positiven Bereich bleiben. Wird ein negativer Wert eingetragen ist das Drehverhalten der Seiltrommel andersherum.&nbsp;<div><br></div><div>Mit dem Parameter Richtung kann das eben erwähnte Drehverhalten geändert werden.</div><div>True bedeutet das hochziehen der Masse und False das Herunterlassen der Masse.</div><div><br></div><div><br></div></body></html>"));
  end Spannungsquelle;

  model Einphasen_Gleichstrommotor"Im Modus kann der Betriebsstatus An(True) oder Aus(False) festgelegt werden."
  Flaschenzug_Bibliothek.Winkel_Moment_Connector winkel_Moment_Connector1 annotation(
      Placement(visible = true, transformation(origin = {42, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {91, 1}, extent = {{-7, -7}, {7, 7}}, rotation = 0)));
    Flaschenzug_Bibliothek.Spannung_Strom_Connector spannung_Strom_Connector1 annotation(
      Placement(visible = true, transformation(origin = {-40, 0}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {-90, -38}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
    import SI = Modelica.SIunits;
    constant Real pi = Modelica.Constants.pi "PI";
    // Werte aus Heidrich Skript "Seiten aus AAeA 2011-W Musterklausur fuer Studenten.pdf"
    constant SI.Voltage Ub = 1.4"Buerstenabfallspannung";
    constant SI.Resistance Ra = 0.2"Ankerwiderstand";
    constant SI.Inductance La = 0"Ankerinduktivitaet";
    constant SI.ElectricalTorqueConstant kt = 0.1"Drehmomentkonstante";
    constant Real cf(unit = "N.m.s") = 0.0025"Reibungsverlustkonstante"; 
    constant Real cv(unit = "N.m.s2") = 0.000104"Ventilationsverlustkonstante";
    constant SI.MomentOfInertia Jtot = 0.005"Massentraegheit";
    //  gesamt (geschaetzter Wert, Vollzylinder mit Masse 1 kg und r = 0.1 m) http://www.hv-engineering.de/pdf/pdf_anleitungen/TechnischeAnleitungNr7.pdf
    SI.Voltage Ua"Ankerspannung";
    SI.Voltage Ug"Luftspalt-Spannung"; 
    SI.ElectricCurrent Ia"Ankerstrom"; 
    SI.AngularFrequency om"Winkelgeschwindigkeit";
    SI.Frequency n"Drehzahl";
    SI.Torque Mf"Reibungsmoment";
    SI.Torque Mv "Ventilationsmoment";
    SI.Torque Ml "Lastmoment";
    parameter Boolean Modus = true "Betriebsmodus";
    
    SI.ElectricCurrent I"Strom";
    SI.Voltage U"Spannung";
    SI.Torque M "Moment";
    SI.Angle phi "Winkel";
  equation
    winkel_Moment_Connector1.phi = phi;
    winkel_Moment_Connector1.M = M;
     spannung_Strom_Connector1.I = I;
     spannung_Strom_Connector1.U = U;
    if Modus then
      spannung_Strom_Connector1.U = Ua;
      Ug = kt * om;
      Ua = 2 * Ub + Ra * Ia + La * der(Ia) + Ug;
      kt * Ia = Jtot * der(om) + Mf + Mv + Ml;
    else
      Ug = 0;
      Ua = 0;
      om = 0;
      Ia = 0;
    end if;
    Ia = spannung_Strom_Connector1.I;
    Mf = cf * n;
    Mv = sign(n) * cv * n ^ 2;
    Ml = winkel_Moment_Connector1.M;
    om = 2 * pi * n;
    der(winkel_Moment_Connector1.phi) = om;
    annotation(
      Icon(coordinateSystem(initialScale = 0.1), graphics = {Rectangle(origin = {-77, -1}, fillPattern = FillPattern.Solid, extent = {{-3, 51}, {3, -51}}), Rectangle(extent = {{80, 50}, {80, 50}}), Rectangle(extent = {{80, 50}, {80, 50}}), Rectangle(extent = {{80, -50}, {80, -50}}), Rectangle(extent = {{-12, 48}, {-12, 48}}), Rectangle(origin = {32, -3}, fillPattern = FillPattern.Solid, extent = {{42, 53}, {48, -49}}), Rectangle(origin = {0, 67}, fillPattern = FillPattern.Solid, extent = {{-60, 3}, {60, -3}}), Rectangle(origin = {0, -67}, fillPattern = FillPattern.Solid, extent = {{-60, 3}, {60, -3}}), Polygon(origin = {-70, -61}, fillPattern = FillPattern.Solid, points = {{-10, 9}, {10, -9}, {10, -3}, {-4, 9}, {-4, 9}, {-10, 9}}), Polygon(origin = {70, -61}, fillPattern = FillPattern.Solid, points = {{-10, -3}, {4, 9}, {10, 9}, {-10, -9}, {-10, -3}}), Polygon(origin = {-70, 60}, fillPattern = FillPattern.Solid, points = {{-10, -10}, {10, 10}, {10, 4}, {-4, -10}, {-4, -10}, {-10, -10}}), Polygon(origin = {70, 60}, fillPattern = FillPattern.Solid, points = {{-10, 10}, {10, -10}, {4, -10}, {-10, 4}, {-10, 10}}), Rectangle(origin = {-55, 0}, fillPattern = FillPattern.Solid, extent = {{-5, 64}, {1, -64}}), Rectangle(origin = {59, 0}, fillPattern = FillPattern.Solid, extent = {{-5, 64}, {1, -64}}), Rectangle(origin = {21, 0}, fillPattern = FillPattern.Solid, extent = {{-5, 64}, {1, -64}}), Rectangle(origin = {-18, 1}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {-20, -17}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {-18, 19}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {-18, -33}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {-18, 35}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {-18, 47}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {-18, -45}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {-18, 59}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {-18, -57}, fillPattern = FillPattern.Solid, extent = {{-36, 3}, {36, -5}}), Rectangle(origin = {90, 0}, fillPattern = FillPattern.Solid, extent = {{-10, 12}, {10, -12}}), Polygon(origin = {39, -3}, fillColor = {255, 255, 0}, fillPattern = FillPattern.Solid, points = {{3, 37}, {-9, 1}, {-1, 1}, {-7, -31}, {9, 7}, {-1, 7}, {3, 37}}), Polygon(origin = {-2, -82}, fillPattern = FillPattern.Solid, points = {{-70, -8}, {-52, 12}, {54, 12}, {70, -8}, {70, -12}, {-70, -12}, {-70, -8}})}),
      Documentation(info = "<html><head></head><body>Hier werden notwendige Variablen und Konstanten definiert, die für den Einphasen Gleichstrommotor von Nöten sind.<div>&nbsp;Der Parameter Modus ist für den Betriebsmodus An/Aus zuständig und mit true/false festzulegen.</div><div>Ist der Motor im Aus-Zustand, ist das System bewegungslos. Der Flaschenzug bewegt sich nur im An-Zustand.</div></body></html>"));
  end Einphasen_Gleichstrommotor;

  model Flaschenzug_Zugrichtung_oben"Hier kann die Rollenanzahl des Flaschenzugs festgelegt werden."
   import SI = Modelica.SIunits;
  Flaschenzug_Bibliothek.Kraft_Weg_Connector F_s_Motor annotation(
      Placement(visible = true, transformation(origin = {66, -72}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {62, -46}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  Flaschenzug_Bibliothek.Kraft_Weg_Connector F_s_Masse annotation(
      Placement(visible = true, transformation(origin = {12, -176}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {12, -148}, extent = {{-10, -10}, {10, 10}}, rotation = 0)));
  parameter Real n = 4" Anzahl der Rollen";
    
    SI.Velocity v(start =0)"Geschwindigkeit";
    SI.Acceleration a(start=0)"Beschleunigung";
    SI.Length s "Weg";
    SI.Force F "Kraft";
  equation
    F_s_Masse.s = s;
    F_s_Masse.F = F;
 F_s_Masse.F = F_s_Motor.F*(n+1);
    F_s_Masse.s * (n + 1) = F_s_Motor.s;
    v = der(F_s_Masse.s);
    a = der(v);
    annotation(
      Icon(graphics = {Ellipse(origin = {6, -52}, fillColor = {116, 79, 65}, fillPattern = FillPattern.Solid, extent = {{58, 60}, {-40, -40}}, endAngle = 360), Ellipse(origin = {7, -52}, fillColor = {127, 111, 53}, fillPattern = FillPattern.Solid, extent = {{51, 54}, {-35, -34}}, endAngle = 360), Rectangle(origin = {13, -102}, fillPattern = FillPattern.VerticalCylinder, extent = {{-1, 50}, {3, -50}}), Ellipse(origin = {8, 322}, rotation = 180, fillColor = {116, 79, 65}, fillPattern = FillPattern.Solid, extent = {{40, 38}, {-54, -56}}, endAngle = 360), Ellipse(origin = {9, 326}, rotation = 180, fillColor = {127, 111, 53}, fillPattern = FillPattern.Solid, extent = {{33, 34}, {-45, -44}}, endAngle = 360), Rectangle(origin = {11, 236}, rotation = 180, fillPattern = FillPattern.VerticalCylinder, extent = {{-5, -106}, {-1, -206}}), Ellipse(origin = {16, 50}, fillColor = {116, 79, 65}, fillPattern = FillPattern.Solid, extent = {{36, 36}, {-40, -40}}, endAngle = 360), Ellipse(origin = {17, 50}, fillColor = {127, 111, 53}, fillPattern = FillPattern.Solid, extent = {{29, 30}, {-35, -34}}, endAngle = 360), Rectangle(origin = {13, -2}, fillPattern = FillPattern.VerticalCylinder, extent = {{-1, 50}, {3, -50}}), Ellipse(origin = {16, 246}, rotation = 180, fillColor = {116, 79, 65}, fillPattern = FillPattern.Solid, extent = {{40, 40}, {-36, -36}}, endAngle = 360), Ellipse(origin = {15, 246}, rotation = 180, fillColor = {127, 111, 53}, fillPattern = FillPattern.Solid, extent = {{33, 34}, {-31, -30}}, endAngle = 360), Rectangle(origin = {11, 136}, rotation = 180, fillPattern = FillPattern.VerticalCylinder, extent = {{-5, -106}, {-1, -206}}), Ellipse(origin = {12, 186}, fillPattern = FillPattern.Solid, extent = {{2, 2}, {-2, -2}}, endAngle = 360), Ellipse(origin = {12, 148}, fillPattern = FillPattern.Solid, extent = {{2, 2}, {-2, -2}}, endAngle = 360), Ellipse(origin = {12, 106}, fillPattern = FillPattern.Solid, extent = {{2, 2}, {-2, -2}}, endAngle = 360), Line(origin = {63.8521, 150.131}, points = {{-12, -104}, {-2, 186}}), Line(origin = {-30.7523, 105.571}, points = {{-3, -141}, {-3, 225}}), Line(origin = {56.0157, 249.149}, points = {{-5, -2}, {-9, -122}}), Line(origin = {-22.1479, 90.1312}, points = {{-2, -38}, {-2, 160}}), Rectangle(origin = {10, 450}, fillPattern = FillPattern.Solid, extent = {{-100, 4}, {100, -10}}), Polygon(origin = {-75, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {-35, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {3, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {39, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {79, 475}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Rectangle(origin = {14, 431}, fillPattern = FillPattern.Solid, extent = {{-10, 15}, {10, -15}}), Ellipse(origin = {15, 379}, fillPattern = FillPattern.Solid, extent = {{-41, 41}, {39, -39}}, endAngle = 360), Ellipse(origin = {-1, 395}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-9, 9}, {39, -39}}, endAngle = 360), Rectangle(origin = {47, 398}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-23, 22}, {19, -18}}), Ellipse(origin = {45, 381}, fillPattern = FillPattern.Solid, extent = {{-7, 7}, {9, -9}}, endAngle = 360)}, coordinateSystem(initialScale = 0.2, extent = {{-200, -200}, {300, 500}})),
      Documentation(info = "<html><head></head><body><span style=\"font-size: 12px;\">Massen_Rolle ist immer zur Verwendung zur Connection an der Masse zu verwenden.</span><div style=\"font-size: 12px;\">Kommt ab 3 Rollen zum Einsatz.<br><div><br></div><div>Connector 3 ist mit der Masse zu verbinden.</div><div>Connector2 ist mit Connector 2 der Decken_Rolle zu verbinden.</div><div>Connector 1 ist mit Connector 1 einer Rolle_Mitte _Oben zu verbinden.</div><div>Connector 4 wir mit einem Connector 4 der Rolle Rolle_Mitte_unten verbunden oder mit Connector 2 der Rolle_Rolle_Mitte_oben.</div></div></body></html>"),
      Diagram(coordinateSystem(initialScale = 0.2, extent = {{-200, -200}, {300, 500}})),
      __OpenModelica_commandLineOptions = "");
  
  
  end Flaschenzug_Zugrichtung_oben;

  model Flaschenzug_Zugrichtung_unten"Hier kann die Rollenanzahl des Flaschenzugs festgelegt werden."
    import SI = Modelica.SIunits;
    Flaschenzug_Bibliothek.Kraft_Weg_Connector F_s_Motor annotation(
      Placement(visible = true, transformation(origin = {-44, 364}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {6, 258}, extent = {{-8, -8}, {8, 8}}, rotation = 0)));
    Flaschenzug_Bibliothek.Kraft_Weg_Connector F_s_Masse annotation(
      Placement(visible = true, transformation(origin = {2, -118}, extent = {{-10, -10}, {10, 10}}, rotation = 0), iconTransformation(origin = {53, -223}, extent = {{-7, -7}, {7, 7}}, rotation = 0)));
    parameter Real n = 4"Anzahl der Rollen";
   
    SI.Velocity v(start =0)"Geschwindigkeit";
    SI.Acceleration a(start=0)"Beschleunigung";
    SI.Length s "Weg";
    SI.Force F "Kraft";
  equation
  F_s_Masse.s = s;
    F_s_Masse.F = F;
    F_s_Masse.F = F_s_Motor.F * n;
    F_s_Masse.s * n = F_s_Motor.s;
    v = der(F_s_Masse.s);
    a = der(v);
    annotation(
      Icon(graphics = {Ellipse(origin = {46, -124}, fillColor = {116, 79, 65}, fillPattern = FillPattern.Solid, extent = {{58, 60}, {-40, -40}}, endAngle = 360), Ellipse(origin = {47, -124}, fillColor = {127, 111, 53}, fillPattern = FillPattern.Solid, extent = {{51, 54}, {-35, -34}}, endAngle = 360), Rectangle(origin = {53, -174}, fillPattern = FillPattern.VerticalCylinder, extent = {{-1, 50}, {3, -50}}), Ellipse(origin = {48, 250}, rotation = 180, fillColor = {116, 79, 65}, fillPattern = FillPattern.Solid, extent = {{40, 38}, {-54, -56}}, endAngle = 360), Ellipse(origin = {49, 254}, rotation = 180, fillColor = {127, 111, 53}, fillPattern = FillPattern.Solid, extent = {{33, 34}, {-45, -44}}, endAngle = 360), Rectangle(origin = {51, 164}, rotation = 180, fillPattern = FillPattern.VerticalCylinder, extent = {{-5, -106}, {-1, -206}}), Ellipse(origin = {56, -22}, fillColor = {116, 79, 65}, fillPattern = FillPattern.Solid, extent = {{36, 36}, {-40, -40}}, endAngle = 360), Ellipse(origin = {57, -22}, fillColor = {127, 111, 53}, fillPattern = FillPattern.Solid, extent = {{29, 30}, {-35, -34}}, endAngle = 360), Rectangle(origin = {53, -74}, fillPattern = FillPattern.VerticalCylinder, extent = {{-1, 50}, {3, -50}}), Ellipse(origin = {56, 174}, rotation = 180, fillColor = {116, 79, 65}, fillPattern = FillPattern.Solid, extent = {{40, 40}, {-36, -36}}, endAngle = 360), Ellipse(origin = {55, 174}, rotation = 180, fillColor = {127, 111, 53}, fillPattern = FillPattern.Solid, extent = {{33, 34}, {-31, -30}}, endAngle = 360), Rectangle(origin = {51, 64}, rotation = 180, fillPattern = FillPattern.VerticalCylinder, extent = {{-5, -106}, {-1, -206}}), Ellipse(origin = {52, 114}, fillPattern = FillPattern.Solid, extent = {{2, 2}, {-2, -2}}, endAngle = 360), Ellipse(origin = {52, 76}, fillPattern = FillPattern.Solid, extent = {{2, 2}, {-2, -2}}, endAngle = 360), Ellipse(origin = {52, 34}, fillPattern = FillPattern.Solid, extent = {{2, 2}, {-2, -2}}, endAngle = 360), Line(origin = {104.122, 79.9518}, points = {{0, -186}, {-2, 186}}), Line(origin = {9.51728, 35.3908}, points = {{-3, -141}, {7, 141}}), Line(origin = {91.1217, 77.9518}, points = {{1, 98}, {1, -102}}), Line(origin = {18.1217, 19.9508}, points = {{-2, -38}, {2, 38}}), Rectangle(origin = {54, 450}, fillPattern = FillPattern.Solid, extent = {{-100, 4}, {100, -10}}), Polygon(origin = {-31, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {9, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {49, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {89, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Polygon(origin = {127, 477}, fillPattern = FillPattern.Solid, points = {{-15, -23}, {15, 23}, {25, 23}, {-5, -23}, {-15, -23}, {-5, -23}, {-15, -23}}), Rectangle(origin = {52, 425}, fillPattern = FillPattern.Solid, extent = {{-10, 15}, {10, -15}}), Ellipse(origin = {53, 379}, fillPattern = FillPattern.Solid, extent = {{-41, 41}, {39, -39}}, endAngle = 360), Ellipse(origin = {37, 395}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-9, 9}, {39, -39}}, endAngle = 360), Rectangle(origin = {85, 398}, lineColor = {255, 255, 255}, fillColor = {255, 255, 255}, fillPattern = FillPattern.Solid, extent = {{-23, 22}, {19, -18}}), Ellipse(origin = {83, 383}, fillPattern = FillPattern.Solid, extent = {{-7, 7}, {9, -9}}, endAngle = 360)}, coordinateSystem(initialScale = 0.2, extent = {{-200, -300}, {300, 500}})),
      Documentation(info = "<html><head></head><body><span style=\"font-size: 12px;\">Massen_Rolle ist immer zur Verwendung zur Connection an der Masse zu verwenden.</span><div style=\"font-size: 12px;\">Kommt ab 3 Rollen zum Einsatz.<br><div><br></div><div>Connector 3 ist mit der Masse zu verbinden.</div><div>Connector2 ist mit Connector 2 der Decken_Rolle zu verbinden.</div><div>Connector 1 ist mit Connector 1 einer Rolle_Mitte _Oben zu verbinden.</div><div>Connector 4 wir mit einem Connector 4 der Rolle Rolle_Mitte_unten verbunden oder mit Connector 2 der Rolle_Rolle_Mitte_oben.</div></div></body></html>"),
      Diagram(coordinateSystem(initialScale = 0.2, extent = {{-200, -300}, {300, 500}})),
      __OpenModelica_commandLineOptions = "");
  end Flaschenzug_Zugrichtung_unten;

  model Simulation
  Flaschenzug_Bibliothek.Masse masse1(m = 5)  annotation(
      Placement(visible = true, transformation(origin = {-85, -83}, extent = {{-17, -17}, {17, 17}}, rotation = 0)));
 Flaschenzug_Bibliothek.Flaschenzug_Zugrichtung_oben flaschenzug_Zugrichtung_oben1 annotation(
      Placement(visible = true, transformation(origin = {-86, -32}, extent = {{-40, -40}, {60, 100}}, rotation = 0)));
 Flaschenzug_Bibliothek.Einphasen_Gleichstrommotor einphasen_Gleichstrommotor1 annotation(
      Placement(visible = true, transformation(origin = {22, -38}, extent = {{24, -24}, {-24, 24}}, rotation = 0)));
 Flaschenzug_Bibliothek.Spannungsquelle spannungsquelle1(Richtung = true)  annotation(
      Placement(visible = true, transformation(origin = {22, -86}, extent = {{-18, -18}, {18, 18}}, rotation = 0)));
 Flaschenzug_Bibliothek.Seilrolle seilrolle1 annotation(
      Placement(visible = true, transformation(origin = {-5, 63}, extent = {{-15, -15}, {15, 15}}, rotation = 0)));
  equation
    connect(masse1.F_s_Connector, flaschenzug_Zugrichtung_oben1.F_s_Masse) annotation(
      Line(points = {{-85, -73}, {-84, -73}, {-84, -62}}));
    connect(seilrolle1.F_s_Flaschenzug, flaschenzug_Zugrichtung_oben1.F_s_Motor) annotation(
      Line(points = {{5.5, 76}, {-74, 76}, {-74, -41}}));
    connect(einphasen_Gleichstrommotor1.winkel_Moment_Connector1, seilrolle1.Winkel_Moment_Connector1) annotation(
      Line(points = {{0, -38}, {-18, -38}, {-18, 64}, {-18, 64}}));
    connect(einphasen_Gleichstrommotor1.spannung_Strom_Connector1, spannungsquelle1.spannung_Strom_Connector1) annotation(
      Line(points = {{44, -47}, {62.2, -47}, {62.2, -86}, {37, -86}}));
    annotation(
      Documentation(info = "<html><head></head><body>Deckenrolle und falls vorhanden Massenrolle parametrieren (Rollenanzahl insgesammt)<div><br></div><div>Masse parametrieren</div><div><br></div><div><br></div><div>Motor parametrieren <span class=\"Apple-tab-span\" style=\"white-space:pre\">	</span>(An/Aus -&gt; True/False)&nbsp;</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>(Vorwärts/Rückwärst -&gt; True/False)</div><div><br></div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span>Gescheindigkeit des Aufzugs</div><div><span class=\"Apple-tab-span\" style=\"white-space:pre\">				</span></div></body></html>"),
      Icon(graphics = {Bitmap(origin = {-38, -21}, extent = {{156, 125}, {-70, -87}}, imageSource = "")}));
  end Simulation;
end Flaschenzug_Bibliothek;
